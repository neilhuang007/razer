package RazerOfficial.Razer.gg.module.impl.exploit.disabler;

import RazerOfficial.Razer.gg.event.Listener;
import RazerOfficial.Razer.gg.event.annotations.EventLink;
import RazerOfficial.Razer.gg.event.impl.packet.PacketSendEvent;
import RazerOfficial.Razer.gg.module.impl.exploit.Disabler;
import RazerOfficial.Razer.gg.util.packet.PacketUtil;
import RazerOfficial.Razer.gg.value.Mode;
import net.minecraft.client.entity.EntityPlayerSP;
import net.minecraft.network.Packet;
import net.minecraft.network.play.client.C03PacketPlayer;
import net.minecraft.network.play.client.C0BPacketEntityAction;
import net.minecraft.network.play.client.C0CPacketInput;

public class GhostlyDisabler extends Mode<Disabler> {
    public GhostlyDisabler(String name, Disabler parent) {
        super(name, parent);
    }

    @EventLink
    public final Listener<PacketSendEvent> onPacketSend = event -> {
        Packet<?> packet = event.getPacket();

        if (packet instanceof C03PacketPlayer) {
            PacketUtil.sendNoEvent(new C0CPacketInput());

            C03PacketPlayer c03PacketPlayer = ((C03PacketPlayer) packet);
            double mathGround = Math.round(c03PacketPlayer.y / 0.015625) * 0.015625;

            c03PacketPlayer.y = mathGround;
            c03PacketPlayer.setOnGround(true);
            event.setPacket(c03PacketPlayer);
        }

        if (packet instanceof C0BPacketEntityAction) {
            final C0BPacketEntityAction c0B = (C0BPacketEntityAction) packet;

            if (c0B.getAction().equals(C0BPacketEntityAction.Action.START_SPRINTING)) {
                if (EntityPlayerSP.serverSprintState) {
                    PacketUtil.sendNoEvent(new C0BPacketEntityAction(mc.thePlayer, C0BPacketEntityAction.Action.STOP_SPRINTING));
                    EntityPlayerSP.serverSprintState = false;
                }
                event.setCancelled(true);
            }

            if (c0B.getAction().equals(C0BPacketEntityAction.Action.STOP_SPRINTING)) {
                event.setCancelled(true);
            }
        }
    };
}